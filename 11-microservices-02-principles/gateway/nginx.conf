
user  nginx;
worker_processes  auto;

error_log  /var/log/nginx/error.log notice;
pid        /var/run/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    keepalive_timeout  65;

    #gzip  on;

#     include /etc/nginx/conf.d/*.conf;

    upstream security {
        server security:3000;
    }

    upstream uploader {
        server uploader:3000;
    }

    upstream storage {
        server storage:9000;
    }

    server {
        listen       8080 default;
        server_name  _;

        proxy_intercept_errors on;
        client_max_body_size 128M;
        client_body_buffer_size 128M;

        default_type application/json;
        error_page 403 = @403;
        error_page 404 = @400;
        error_page 405 = @405;

        location / {
            return 400;
        }

        location = /v1/register {
            proxy_pass http://security/v1/user;
            if ($request_method != POST ) {
                return 405;
            }
        }

        location = /v1/token {
            proxy_pass http://security/v1/token;
            if ($request_method != POST ) {
                return 405;
            }
        }

        location = /v1/user {
            auth_request /_jwt_validation;
            proxy_pass http://security/v1/user;
            if ($request_method != GET ) {
                return 405;
            }
        }

        location = /v1/upload {
            auth_request /_jwt_validation;
            proxy_pass http://uploader/v1/upload;
            if ($request_method != POST ) {
                return 405;
            }
        }

        location ~ ^/v1/user/([^/]+)$ {
            auth_request /_jwt_validation;
            proxy_pass http://storage/data/$1;
            if ($request_method != GET ) {
                return 405;
            }
        }

        location /_jwt_validation {
            internal;
            proxy_pass http://security/v1/token/validation;
            proxy_pass_request_body off;
            proxy_set_header Content-Length "";
            proxy_set_header X-Original-URI $request_uri;
        }

        location @400 {
            return 400 '{"status":400,"message":"Bad request"}\n';
        }

        location @403 {
            return 403 '{"status":403,"message":"Forbidden"}\n';
        }

        location @405 {
            return 405 '{"status":405,"message":"Method not allowed"}\n';
        }
    }
}
